{"nbformat_minor": 2, "metadata": {"kernelspec": {"language": "python", "display_name": "GeoNotebook + GeoPySpark", "name": "geonotebook3"}, "language_info": {"mimetype": "text/x-python", "file_extension": ".py", "nbconvert_exporter": "python", "codemirror_mode": {"version": 3, "name": "ipython"}, "version": "3.4.5", "pygments_lexer": "ipython3", "name": "python"}}, "cells": [{"metadata": {"collapsed": true}, "source": ["import geopyspark as gps\n", "from pyspark import SparkContext\n", "import json\n", "from shapely.geometry import mapping, shape\n", "from shapely.ops import transform\n", "import pyproj\n", "import urllib.request, json\n", "from functools import partial\n", "#from shapely.geometry import shape, asShape, MultiPoint, MultiLineString\n", "from geonotebook.wrappers import TMSRasterData, GeoJsonData\n", "\n", "from pyspark import SparkContext\n", "import numpy as np\n", "import os\n"], "outputs": [], "execution_count": 1, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["# Grab data for Alabamba\n", "state_name, county_name = \"AL\", \"Autauga\"\n", "def get_state_shapes(state, county):\n", "    project = partial(\n", "        pyproj.transform,\n", "        pyproj.Proj(init='epsg:4326'),\n", "        pyproj.Proj(init='epsg:3857'))\n", "\n", "    state_url = \"https://raw.githubusercontent.com/johan/world.geo.json/master/countries/USA/{}.geo.json\".format(state)\n", "    county_url = \"https://raw.githubusercontent.com/johan/world.geo.json/master/countries/USA/{}/{}.geo.json\".format(state,county)\n", "    read_json = lambda url: json.loads(urllib.request.urlopen(url).read().decode(\"utf-8\"))\n", "    state_ll = shape(read_json(state_url)['features'][0]['geometry'])\n", "    state_wm = transform(project, state_ll)\n", "    county_ll = shape(read_json(county_url)['features'][0]['geometry'])\n", "    county_wm = transform(project, county_ll)\n", "    return (state_ll, state_wm, county_ll, county_wm)\n", "\n", "(state_ll, state_wm, county_ll, county_wm) = get_state_shapes(state_name, county_name) "], "outputs": [], "execution_count": 2, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["#os.environ[\"PYSPARK_GATEWAY_PORT\"] = \"25334\"\n", "conf = gps.geopyspark_conf(appName=\"Landsat\") \\\n", "          .setMaster(\"local[*]\") \\\n", "          .set(key='spark.ui.enabled', value='true') \\\n", "          .set(key=\"spark.driver.memory\", value=\"8G\") \\\n", "          .set(\"spark.hadoop.yarn.timeline-service.enabled\", False)\n", "sc = SparkContext(conf=conf)"], "outputs": [], "execution_count": 3, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["cdl_layer_name = \"cdl-2016-zoomed\"\n", "cdl_colormap_dict = {1: 0xffd300ff,2: 0xff2626ff,3: 0x00a8e5ff,4: 0xff9e0cff,5: 0x267000ff,6: 0xffff00ff,10: 0x70a500ff,11: 0x00af4cff,12: 0xdda50cff,13: 0xdda50cff,14: 0x7fd3ffff,21: 0xe2007cff,22: 0x896354ff,23: 0xd8b56bff,24: 0xa57000ff,25: 0xd69ebcff,26: 0x707000ff,27: 0xad007cff,28: 0xa05989ff,29: 0x700049ff,30: 0xd69ebcff,31: 0xd1ff00ff,32: 0x7f99ffff,33: 0xd6d600ff,34: 0xd1ff00ff,35: 0x00af4cff,36: 0xffa5e2ff,37: 0xa5f28cff,38: 0x00af4cff,39: 0xd69ebcff,41: 0xa800e5ff,42: 0xa50000ff,43: 0x702600ff,44: 0x00af4cff,45: 0xb27fffff,46: 0x702600ff,47: 0xff6666ff,48: 0xff6666ff,49: 0xffcc66ff,50: 0xff6666ff,51: 0x00af4cff,52: 0x00ddafff,53: 0x54ff00ff,54: 0xf2a377ff,55: 0xff6666ff,56: 0x00af4cff,57: 0x7fd3ffff,58: 0xe8bfffff,59: 0xafffddff,60: 0x00af4cff,61: 0xbfbf77ff,63: 0x93cc93ff,64: 0xc6d69eff,65: 0xccbfa3ff,66: 0xff00ffff,67: 0xff8eaaff,68: 0xba004fff,69: 0x704489ff,70: 0x007777ff,71: 0xb29b70ff,72: 0xffff7fff,74: 0xb5705bff,75: 0x00a582ff,76: 0xead6afff,77: 0xb29b70ff,81: 0xf2f2f2ff,82: 0x9b9b9bff,83: 0x4c70a3ff,87: 0x7fb2b2ff,88: 0xe8ffbfff,92: 0x00ffffff,111: 0x4c70a3ff,112: 0xd3e2f9ff,121: 0x9b9b9bff,122: 0x9b9b9bff,123: 0x9b9b9bff,124: 0x9b9b9bff,131: 0xccbfa3ff,141: 0x93cc93ff,142: 0x93cc93ff,143: 0x93cc93ff,152: 0xc6d69eff,176: 0xe8ffbfff,190: 0x7fb2b2ff,195: 0x7fb2b2ff,204: 0x00ff8cff,205: 0xd69ebcff,206: 0xff6666ff,207: 0xff6666ff,208: 0xff6666ff,209: 0xff6666ff,210: 0xff8eaaff,211: 0x334933ff,212: 0xe57026ff,213: 0xff6666ff,214: 0xff6666ff,216: 0xff6666ff,217: 0xb29b70ff,218: 0xff8eaaff,219: 0xff6666ff,220: 0xff8eaaff,221: 0xff6666ff,222: 0xff6666ff,223: 0xff8eaaff,224: 0x00af4cff,225: 0xffd300ff,226: 0xffd300ff,227: 0xff6666ff,229: 0xff6666ff,230: 0x896354ff,231: 0xff6666ff,232: 0xff2626ff,233: 0xe2007cff,234: 0xff9e0cff,235: 0xff9e0cff,236: 0xa57000ff,237: 0xffd300ff,238: 0xa57000ff,239: 0x267000ff,240: 0x267000ff,241: 0xffd300ff,242: 0x000099ff,243: 0xff6666ff,244: 0xff6666ff,245: 0xff6666ff,246: 0xff6666ff,247: 0xff6666ff,248: 0xff6666ff,249: 0xff6666ff,250: 0xff6666ff,251: 0xffd300ff,252: 0x267000ff,253: 0xa57000ff,254: 0x267000ff}\n", "cdl_colormap = gps.ColorMap.from_break_map(cdl_colormap_dict)\n", "values_to_crops = {0: 'Background',1: 'Corn',2: 'Cotton',3: 'Rice',4: 'Sorghum',5: 'Soybeans',6: 'Sunflower',10: 'Peanuts',11: 'Tobacco',12: 'Sweet Corn',13: 'Pop or Orn Corn',14: 'Mint',21: 'Barley',22: 'Durum Wheat',23: 'Spring Wheat',24: 'Winter Wheat',25: 'Other Small Grains',26: 'Dbl Crop WinWht/Soybeans',27: 'Rye',28: 'Oats',29: 'Millet',30: 'Speltz',31: 'Canola',32: 'Flaxseed',33: 'Safflower',34: 'Rape Seed',35: 'Mustard',36: 'Alfalfa',37: 'Other Hay/Non Alfalfa',38: 'Camelina',39: 'Buckwheat',41: 'Sugarbeets',42: 'Dry Beans',43: 'Potatoes',44: 'Other Crops',45: 'Sugarcane',46: 'Sweet Potatoes',47: 'Misc Vegs & Fruits',48: 'Watermelons',49: 'Onions',50: 'Cucumbers',51: 'Chick Peas',52: 'Lentils',53: 'Peas',54: 'Tomatoes',55: 'Caneberries',56: 'Hops',57: 'Herbs',58: 'Clover/Wildflowers',59: 'Sod/Grass Seed',60: 'Switchgrass',61: 'Fallow/Idle Cropland',63: 'Forest',64: 'Shrubland',65: 'Barren',66: 'Cherries',67: 'Peaches',68: 'Apples',69: 'Grapes',70: 'Christmas Trees',71: 'Other Tree Crops',72: 'Citrus',74: 'Pecans',75: 'Almonds',76: 'Walnuts',77: 'Pears',81: 'Clouds/No Data',82: 'Developed',83: 'Water',87: 'Wetlands',88: 'Nonag/Undefined',92: 'Aquaculture',111: 'Open Water',112: 'Perennial Ice/Snow ',121: 'Developed/Open Space',122: 'Developed/Low Intensity',123: 'Developed/Med Intensity',124: 'Developed/High Intensity',131: 'Barren',141: 'Deciduous Forest',142: 'Evergreen Forest',143: 'Mixed Forest',152: 'Shrubland',176: 'Grassland/Pasture',190: 'Woody Wetlands',195: 'Herbaceous Wetlands',204: 'Pistachios',205: 'Triticale',206: 'Carrots',207: 'Asparagus',208: 'Garlic',209: 'Cantaloupes',210: 'Prunes',211: 'Olives',212: 'Oranges',213: 'Honeydew Melons',214: 'Broccoli',216: 'Peppers',217: 'Pomegranates',218: 'Nectarines',219: 'Greens',220: 'Plums',221: 'Strawberries',222: 'Squash',223: 'Apricots',224: 'Vetch',225: 'Dbl Crop WinWht/Corn',226: 'Dbl Crop Oats/Corn',227: 'Lettuce',229: 'Pumpkins',230: 'Dbl Crop Lettuce/Durum Wht',231: 'Dbl Crop Lettuce/Cantaloupe',232: 'Dbl Crop Lettuce/Cotton',233: 'Dbl Crop Lettuce/Barley',234: 'Dbl Crop Durum Wht/Sorghum',235: 'Dbl Crop Barley/Sorghum',236: 'Dbl Crop WinWht/Sorghum',237: 'Dbl Crop Barley/Corn',238: 'Dbl Crop WinWht/Cotton',239: 'Dbl Crop Soybeans/Cotton',240: 'Dbl Crop Soybeans/Oats',241: 'Dbl Crop Corn/Soybeans',242: 'Blueberries',243: 'Cabbage',244: 'Cauliflower',245: 'Celery',246: 'Radishes',247: 'Turnips',248: 'Eggplants',249: 'Gourds',250: 'Cranberries',254: 'Dbl Crop Barley/Soybeans'}\n", "crops_to_values = {v: k for k, v in values_to_crops.items()}\n", "crops = ['Corn','Cotton','Rice','Sorghum','Soybeans','Sunflower','Peanuts','Tobacco','Sweet Corn','Pop or Orn Corn','Mint','Barley','Durum Wheat','Spring Wheat','Winter Wheat','Other Small Grains','Rye','Oats','Millet','Speltz','Canola','Flaxseed','Safflower','Rape Seed','Mustard','Alfalfa','Other Hay/Non Alfalfa','Camelina','Buckwheat','Sugarbeets','Dry Beans','Potatoes','Other Crops','Sugarcane','Sweet Potatoes','Misc Vegs & Fruits','Watermelons','Onions','Cucumbers','Chick Peas','Lentils','Peas','Tomatoes','Caneberries','Hops','Herbs','Clover/Wildflowers','Cherries','Peaches','Apples','Grapes','Pecans','Almonds','Walnuts','Pears','Pistachios','Triticale','Carrots','Asparagus','Garlic','Cantaloupes','Prunes','Olives','Oranges','Honeydew Melons','Broccoli','Peppers','Pomegranates','Nectarines','Greens','Plums','Strawberries','Squash','Apricots','Vetch','Lettuce','Pumpkins','Blueberries','Cabbage','Cauliflower','Celery','Radishes','Turnips','Eggplants','Gourds','Cranberries']"], "outputs": [], "execution_count": 4, "cell_type": "code"}, {"source": ["# View CLD from GeoTrellis Catalog"], "metadata": {}, "cell_type": "markdown"}, {"metadata": {"collapsed": true}, "source": ["\n", "tms_server = gps.TMS.build((\"s3://datahub-catalogs-us-east-1\", cdl_layer_name), \n", "                           display=cdl_colormap)\n"], "outputs": [], "execution_count": 5, "cell_type": "code"}, {"metadata": {}, "source": ["M.add_layer(TMSRasterData(tms_server), name=\"cdl\")"], "outputs": [{"output_type": "execute_result", "data": {"text/plain": ["<promise.promise.Promise at 0x7f7a0014e6a0>"]}, "execution_count": 6, "metadata": {}}], "execution_count": 6, "cell_type": "code"}, {"metadata": {}, "source": ["p = county_ll.centroid\n", "M.set_center(p.x, p.y, 7)"], "outputs": [{"output_type": "execute_result", "data": {"text/plain": ["<promise.promise.Promise at 0x7f7a0011ca90>"]}, "execution_count": 13, "metadata": {}}], "execution_count": 13, "cell_type": "code"}, {"source": ["# Read State CDL Tiles"], "metadata": {}, "cell_type": "markdown"}, {"metadata": {"collapsed": true}, "source": ["layer = gps.query(\"s3://datahub-catalogs-us-east-1/\", \n", "                  cdl_layer_name,\n", "                  layer_zoom=13,\n", "                  query_geom=state_wm,\n", "                  num_partitions=500)"], "outputs": [], "execution_count": 7, "cell_type": "code"}, {"metadata": {}, "source": ["layer.get_min_max()"], "outputs": [{"output_type": "execute_result", "data": {"text/plain": ["(1.0, 225.0)"]}, "execution_count": 8, "metadata": {}}], "execution_count": 8, "cell_type": "code"}, {"metadata": {}, "source": ["(layer + 10).get_min_max()"], "outputs": [{"output_type": "execute_result", "data": {"text/plain": ["(11.0, 253.0)"]}, "execution_count": 8, "metadata": {}}], "execution_count": 8, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["for l in M.layers:\n", "    M.remove_layer(l)"], "outputs": [], "execution_count": 9, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["pyramid = layer.pyramid()\n"], "outputs": [], "execution_count": 10, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["tms_server = gps.TMS.build(pyramid, \n", "                           display=cdl_colormap)"], "outputs": [], "execution_count": 11, "cell_type": "code"}, {"metadata": {}, "source": ["M.add_layer(TMSRasterData(tms_server), name=\"cdl\")"], "outputs": [{"output_type": "execute_result", "data": {"text/plain": ["<promise.promise.Promise at 0x7f7a0011cb70>"]}, "execution_count": 12, "metadata": {}}], "execution_count": 12, "cell_type": "code"}, {"metadata": {}, "source": ["M.add_layer(GeoJsonData(mapping(state_ll)), name=\"state\")"], "outputs": [{"output_type": "execute_result", "data": {"text/plain": ["<promise.promise.Promise at 0x7fde640d8320>"]}, "execution_count": 19, "metadata": {}}], "execution_count": 19, "cell_type": "code"}, {"metadata": {}, "source": ["M.remove_layer(M.layers[0])"], "outputs": [{"output_type": "execute_result", "data": {"text/plain": ["<promise.promise.Promise at 0x7fde640d8898>"]}, "execution_count": 20, "metadata": {}}], "execution_count": 20, "cell_type": "code"}, {"metadata": {}, "source": ["masked = layer.mask(geometries=state_wm)\n", "pyramid = masked.pyramid()\n", "tms_server = gps.TMS.build(pyramid, \n", "                           display=cdl_colormap)\n", "M.add_layer(TMSRasterData(tms_server), name=\"cdl\")"], "outputs": [{"output_type": "execute_result", "data": {"text/plain": ["<promise.promise.Promise at 0x7fde640df9b0>"]}, "execution_count": 21, "metadata": {}}], "execution_count": 21, "cell_type": "code"}, {"metadata": {}, "source": ["chatta_py_rdd = masked.to_numpy_rdd()\n", "chatta_py_rdd.first()"], "outputs": [{"output_type": "execute_result", "data": {"text/plain": ["(SpatialKey(col=2462, row=3040),\n", " Tile(cells=array([[[  0,   0,   0, ...,   0,   0,   0],\n", "        [  0,   0,   0, ...,   0,   0,   0],\n", "        [  0,   0,   0, ...,   0,   0,   0],\n", "        ..., \n", "        [  0,   0,   0, ..., 111, 111, 111],\n", "        [  0,   0,   0, ..., 111, 111, 111],\n", "        [  0,   0,   0, ..., 111, 111, 111]]], dtype=uint8), cell_type='UBYTE', no_data_value=0.0))"]}, "execution_count": 22, "metadata": {}}], "execution_count": 22, "cell_type": "code"}, {"metadata": {}, "source": ["import numpy as np\n", "crop_values = map(lambda c: crops_to_values[c], crops)\n", "def get_counts(tile):\n", "    values, counts = np.unique(tile.cells.flatten(), return_counts=True)\n", "    d = {}\n", "    \n", "    for v, c in zip(values, counts):\n", "        if v in crop_values:\n", "            d[v] = c\n", "    return d\n", "\n", "def merge_counts(d1, d2):\n", "    d = {}\n", "    for k in set(d1.keys()).union(set(d2.keys())):\n", "        v = 0\n", "        if k in d1:\n", "            v += d1[k]\n", "        if k in d2:\n", "            v += d2[k]\n", "        d[k] = v\n", "    return d\n", "\n", "counts = chatta_py_rdd.map(lambda x: get_counts(x[1])).reduce(merge_counts)\n", "counts"], "outputs": [{"output_type": "execute_result", "data": {"text/plain": ["{1: 5318,\n", " 5: 4,\n", " 12: 3369,\n", " 27: 352,\n", " 28: 34,\n", " 36: 3933,\n", " 37: 40714,\n", " 43: 34,\n", " 47: 10,\n", " 54: 66,\n", " 68: 16}"]}, "execution_count": 24, "metadata": {}}], "execution_count": 24, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["import pandas as pd\n", "import matplotlib.pyplot as plt\n", "\n", "named_counts = {}\n", "for k in counts:\n", "    named_counts[values_to_crops[k]] = counts[k]\n", "\n", "df = pd.DataFrame.from_dict(named_counts,  orient='index')"], "outputs": [], "execution_count": 25, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["df"], "outputs": [], "execution_count": null, "cell_type": "code"}, {"metadata": {}, "source": ["plt.figure()\n", "df.plot.bar(legend=False)\n", "plt.show()"], "outputs": [{"output_type": "display_data", "data": {"text/plain": ["<matplotlib.figure.Figure at 0x7fde640e5668>"]}, "metadata": {}}, {"output_type": "display_data", "data": {"text/plain": ["<matplotlib.figure.Figure at 0x7fde640d87b8>"], "image/png": "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\nLf2M4thMAAAAAElFTkSuQmCC\n"}, "metadata": {}}], "execution_count": 26, "cell_type": "code"}, {"source": ["# scratch"], "metadata": {"collapsed": true}, "cell_type": "markdown"}, {"metadata": {"collapsed": true}, "source": ["z9 = chatta_pp.levels[9]"], "outputs": [], "execution_count": null, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["z9.lookup(137,202)"], "outputs": [], "execution_count": null, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["for layer in chatta_pp.levels.values():\n", "    gps.write(\"file://{}/catalog/\".format(curdir), \"chatta-test\", layer)"], "outputs": [], "execution_count": null, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["s = \"\"\"0: 0,0,0,255\n", "    1: 255,211,0,255\n", "    2: 255,38,38,255\n", "    3: 0,168,229,255\n", "    4: 255,158,12,255\n", "    5: 38,112,0,255\n", "    6: 255,255,0,255\n", "    7: 0,0,0,255\n", "    8: 0,0,0,255\n", "    9: 0,0,0,255\n", "   10: 112,165,0,255\n", "   11: 0,175,76,255\n", "   12: 221,165,12,255\n", "   13: 221,165,12,255\n", "   14: 127,211,255,255\n", "   15: 0,0,0,255\n", "   16: 0,0,0,255\n", "   17: 0,0,0,255\n", "   18: 0,0,0,255\n", "   19: 0,0,0,255\n", "   20: 0,0,0,255\n", "   21: 226,0,124,255\n", "   22: 137,99,84,255\n", "   23: 216,181,107,255\n", "   24: 165,112,0,255\n", "   25: 214,158,188,255\n", "   26: 112,112,0,255\n", "   27: 173,0,124,255\n", "   28: 160,89,137,255\n", "   29: 112,0,73,255\n", "   30: 214,158,188,255\n", "   31: 209,255,0,255\n", "   32: 127,153,255,255\n", "   33: 214,214,0,255\n", "   34: 209,255,0,255\n", "   35: 0,175,76,255\n", "   36: 255,165,226,255\n", "   37: 165,242,140,255\n", "   38: 0,175,76,255\n", "   39: 214,158,188,255\n", "   40: 0,0,0,255\n", "   41: 168,0,229,255\n", "   42: 165,0,0,255\n", "   43: 112,38,0,255\n", "   44: 0,175,76,255\n", "   45: 178,127,255,255\n", "   46: 112,38,0,255\n", "   47: 255,102,102,255\n", "   48: 255,102,102,255\n", "   49: 255,204,102,255\n", "   50: 255,102,102,255\n", "   51: 0,175,76,255\n", "   52: 0,221,175,255\n", "   53: 84,255,0,255\n", "   54: 242,163,119,255\n", "   55: 255,102,102,255\n", "   56: 0,175,76,255\n", "   57: 127,211,255,255\n", "   58: 232,191,255,255\n", "   59: 175,255,221,255\n", "   60: 0,175,76,255\n", "   61: 191,191,119,255\n", "   62: 0,0,0,255\n", "   63: 147,204,147,255\n", "   64: 198,214,158,255\n", "   65: 204,191,163,255\n", "   66: 255,0,255,255\n", "   67: 255,142,170,255\n", "   68: 186,0,79,255\n", "   69: 112,68,137,255\n", "   70: 0,119,119,255\n", "   71: 178,155,112,255\n", "   72: 255,255,127,255\n", "   73: 0,0,0,255\n", "   74: 181,112,91,255\n", "   75: 0,165,130,255\n", "   76: 234,214,175,255\n", "   77: 178,155,112,255\n", "   78: 0,0,0,255\n", "   79: 0,0,0,255\n", "   80: 0,0,0,255\n", "   81: 242,242,242,255\n", "   82: 155,155,155,255\n", "   83: 76,112,163,255\n", "   84: 0,0,0,255\n", "   85: 0,0,0,255\n", "   86: 0,0,0,255\n", "   87: 127,178,178,255\n", "   88: 232,255,191,255\n", "   89: 0,0,0,255\n", "   90: 0,0,0,255\n", "   91: 0,0,0,255\n", "   92: 0,255,255,255\n", "   93: 0,0,0,255\n", "   94: 0,0,0,255\n", "   95: 0,0,0,255\n", "   96: 0,0,0,255\n", "   97: 0,0,0,255\n", "   98: 0,0,0,255\n", "   99: 0,0,0,255\n", "  100: 0,0,0,255\n", "  101: 0,0,0,255\n", "  102: 0,0,0,255\n", "  103: 0,0,0,255\n", "  104: 0,0,0,255\n", "  105: 0,0,0,255\n", "  106: 0,0,0,255\n", "  107: 0,0,0,255\n", "  108: 0,0,0,255\n", "  109: 0,0,0,255\n", "  110: 0,0,0,255\n", "  111: 76,112,163,255\n", "  112: 211,226,249,255\n", "  113: 0,0,0,255\n", "  114: 0,0,0,255\n", "  115: 0,0,0,255\n", "  116: 0,0,0,255\n", "  117: 0,0,0,255\n", "  118: 0,0,0,255\n", "  119: 0,0,0,255\n", "  120: 0,0,0,255\n", "  121: 155,155,155,255\n", "  122: 155,155,155,255\n", "  123: 155,155,155,255\n", "  124: 155,155,155,255\n", "  125: 0,0,0,255\n", "  126: 0,0,0,255\n", "  127: 0,0,0,255\n", "  128: 0,0,0,255\n", "  129: 0,0,0,255\n", "  130: 0,0,0,255\n", "  131: 204,191,163,255\n", "  132: 0,0,0,255\n", "  133: 0,0,0,255\n", "  134: 0,0,0,255\n", "  135: 0,0,0,255\n", "  136: 0,0,0,255\n", "  137: 0,0,0,255\n", "  138: 0,0,0,255\n", "  139: 0,0,0,255\n", "  140: 0,0,0,255\n", "  141: 147,204,147,255\n", "  142: 147,204,147,255\n", "  143: 147,204,147,255\n", "  144: 0,0,0,255\n", "  145: 0,0,0,255\n", "  146: 0,0,0,255\n", "  147: 0,0,0,255\n", "  148: 0,0,0,255\n", "  149: 0,0,0,255\n", "  150: 0,0,0,255\n", "  151: 0,0,0,255\n", "  152: 198,214,158,255\n", "  153: 0,0,0,255\n", "  154: 0,0,0,255\n", "  155: 0,0,0,255\n", "  156: 0,0,0,255\n", "  157: 0,0,0,255\n", "  158: 0,0,0,255\n", "  159: 0,0,0,255\n", "  160: 0,0,0,255\n", "  161: 0,0,0,255\n", "  162: 0,0,0,255\n", "  163: 0,0,0,255\n", "  164: 0,0,0,255\n", "  165: 0,0,0,255\n", "  166: 0,0,0,255\n", "  167: 0,0,0,255\n", "  168: 0,0,0,255\n", "  169: 0,0,0,255\n", "  170: 0,0,0,255\n", "  171: 0,0,0,255\n", "  172: 0,0,0,255\n", "  173: 0,0,0,255\n", "  174: 0,0,0,255\n", "  175: 0,0,0,255\n", "  176: 232,255,191,255\n", "  177: 0,0,0,255\n", "  178: 0,0,0,255\n", "  179: 0,0,0,255\n", "  180: 0,0,0,255\n", "  181: 0,0,0,255\n", "  182: 0,0,0,255\n", "  183: 0,0,0,255\n", "  184: 0,0,0,255\n", "  185: 0,0,0,255\n", "  186: 0,0,0,255\n", "  187: 0,0,0,255\n", "  188: 0,0,0,255\n", "  189: 0,0,0,255\n", "  190: 127,178,178,255\n", "  191: 0,0,0,255\n", "  192: 0,0,0,255\n", "  193: 0,0,0,255\n", "  194: 0,0,0,255\n", "  195: 127,178,178,255\n", "  196: 0,0,0,255\n", "  197: 0,0,0,255\n", "  198: 0,0,0,255\n", "  199: 0,0,0,255\n", "  200: 0,0,0,255\n", "  201: 0,0,0,255\n", "  202: 0,0,0,255\n", "  203: 0,0,0,255\n", "  204: 0,255,140,255\n", "  205: 214,158,188,255\n", "  206: 255,102,102,255\n", "  207: 255,102,102,255\n", "  208: 255,102,102,255\n", "  209: 255,102,102,255\n", "  210: 255,142,170,255\n", "  211: 51,73,51,255\n", "  212: 229,112,38,255\n", "  213: 255,102,102,255\n", "  214: 255,102,102,255\n", "  215: 0,0,0,255\n", "  216: 255,102,102,255\n", "  217: 178,155,112,255\n", "  218: 255,142,170,255\n", "  219: 255,102,102,255\n", "  220: 255,142,170,255\n", "  221: 255,102,102,255\n", "  222: 255,102,102,255\n", "  223: 255,142,170,255\n", "  224: 0,175,76,255\n", "  225: 255,211,0,255\n", "  226: 255,211,0,255\n", "  227: 255,102,102,255\n", "  228: 0,0,0,255\n", "  229: 255,102,102,255\n", "  230: 137,99,84,255\n", "  231: 255,102,102,255\n", "  232: 255,38,38,255\n", "  233: 226,0,124,255\n", "  234: 255,158,12,255\n", "  235: 255,158,12,255\n", "  236: 165,112,0,255\n", "  237: 255,211,0,255\n", "  238: 165,112,0,255\n", "  239: 38,112,0,255\n", "  240: 38,112,0,255\n", "  241: 255,211,0,255\n", "  242: 0,0,153,255\n", "  243: 255,102,102,255\n", "  244: 255,102,102,255\n", "  245: 255,102,102,255\n", "  246: 255,102,102,255\n", "  247: 255,102,102,255\n", "  248: 255,102,102,255\n", "  249: 255,102,102,255\n", "  250: 255,102,102,255\n", "  251: 255,211,0,255\n", "  252: 38,112,0,255\n", "  253: 165,112,0,255\n", "  254: 38,112,0,255\n", "  255: 0,0,0,255\"\"\""], "outputs": [], "execution_count": null, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["import re"], "outputs": [], "execution_count": null, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["l = list(re.finditer(\"([\\d]+): ([\\d]+),([\\d]+),([\\d]+),255\", s))"], "outputs": [], "execution_count": null, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["m = l[10]\n", "    "], "outputs": [], "execution_count": null, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["'%d: 0x%02x%02x%02xff' % )"], "outputs": [], "execution_count": null, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["for m in l:\n", "    (v, r, g, b) = (int(m.group(1)), int(m.group(2)), int(m.group(3)), int(m.group(4)))\n", "    if r != 0 or g != 0 or b != 0:\n", "        print('%d: 0x%02x%02x%02xff,' % (v,r,g,b))\n", "                    "], "outputs": [], "execution_count": null, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["cdl_colormap = {1: 0xffd300ff,\n", "2: 0xff2626ff,\n", "3: 0x00a8e5ff,\n", "4: 0xff9e0cff,\n", "5: 0x267000ff,\n", "6: 0xffff00ff,\n", "10: 0x70a500ff,\n", "11: 0x00af4cff,\n", "12: 0xdda50cff,\n", "13: 0xdda50cff,\n", "14: 0x7fd3ffff,\n", "21: 0xe2007cff,\n", "22: 0x896354ff,\n", "23: 0xd8b56bff,\n", "24: 0xa57000ff,\n", "25: 0xd69ebcff,\n", "26: 0x707000ff,\n", "27: 0xad007cff,\n", "28: 0xa05989ff,\n", "29: 0x700049ff,\n", "30: 0xd69ebcff,\n", "31: 0xd1ff00ff,\n", "32: 0x7f99ffff,\n", "33: 0xd6d600ff,\n", "34: 0xd1ff00ff,\n", "35: 0x00af4cff,\n", "36: 0xffa5e2ff,\n", "37: 0xa5f28cff,\n", "38: 0x00af4cff,\n", "39: 0xd69ebcff,\n", "41: 0xa800e5ff,\n", "42: 0xa50000ff,\n", "43: 0x702600ff,\n", "44: 0x00af4cff,\n", "45: 0xb27fffff,\n", "46: 0x702600ff,\n", "47: 0xff6666ff,\n", "48: 0xff6666ff,\n", "49: 0xffcc66ff,\n", "50: 0xff6666ff,\n", "51: 0x00af4cff,\n", "52: 0x00ddafff,\n", "53: 0x54ff00ff,\n", "54: 0xf2a377ff,\n", "55: 0xff6666ff,\n", "56: 0x00af4cff,\n", "57: 0x7fd3ffff,\n", "58: 0xe8bfffff,\n", "59: 0xafffddff,\n", "60: 0x00af4cff,\n", "61: 0xbfbf77ff,\n", "63: 0x93cc93ff,\n", "64: 0xc6d69eff,\n", "65: 0xccbfa3ff,\n", "66: 0xff00ffff,\n", "67: 0xff8eaaff,\n", "68: 0xba004fff,\n", "69: 0x704489ff,\n", "70: 0x007777ff,\n", "71: 0xb29b70ff,\n", "72: 0xffff7fff,\n", "74: 0xb5705bff,\n", "75: 0x00a582ff,\n", "76: 0xead6afff,\n", "77: 0xb29b70ff,\n", "81: 0xf2f2f2ff,\n", "82: 0x9b9b9bff,\n", "83: 0x4c70a3ff,\n", "87: 0x7fb2b2ff,\n", "88: 0xe8ffbfff,\n", "92: 0x00ffffff,\n", "111: 0x4c70a3ff,\n", "112: 0xd3e2f9ff,\n", "121: 0x9b9b9bff,\n", "122: 0x9b9b9bff,\n", "123: 0x9b9b9bff,\n", "124: 0x9b9b9bff,\n", "131: 0xccbfa3ff,\n", "141: 0x93cc93ff,\n", "142: 0x93cc93ff,\n", "143: 0x93cc93ff,\n", "152: 0xc6d69eff,\n", "176: 0xe8ffbfff,\n", "190: 0x7fb2b2ff,\n", "195: 0x7fb2b2ff,\n", "204: 0x00ff8cff,\n", "205: 0xd69ebcff,\n", "206: 0xff6666ff,\n", "207: 0xff6666ff,\n", "208: 0xff6666ff,\n", "209: 0xff6666ff,\n", "210: 0xff8eaaff,\n", "211: 0x334933ff,\n", "212: 0xe57026ff,\n", "213: 0xff6666ff,\n", "214: 0xff6666ff,\n", "216: 0xff6666ff,\n", "217: 0xb29b70ff,\n", "218: 0xff8eaaff,\n", "219: 0xff6666ff,\n", "220: 0xff8eaaff,\n", "221: 0xff6666ff,\n", "222: 0xff6666ff,\n", "223: 0xff8eaaff,\n", "224: 0x00af4cff,\n", "225: 0xffd300ff,\n", "226: 0xffd300ff,\n", "227: 0xff6666ff,\n", "229: 0xff6666ff,\n", "230: 0x896354ff,\n", "231: 0xff6666ff,\n", "232: 0xff2626ff,\n", "233: 0xe2007cff,\n", "234: 0xff9e0cff,\n", "235: 0xff9e0cff,\n", "236: 0xa57000ff,\n", "237: 0xffd300ff,\n", "238: 0xa57000ff,\n", "239: 0x267000ff,\n", "240: 0x267000ff,\n", "241: 0xffd300ff,\n", "242: 0x000099ff,\n", "243: 0xff6666ff,\n", "244: 0xff6666ff,\n", "245: 0xff6666ff,\n", "246: 0xff6666ff,\n", "247: 0xff6666ff,\n", "248: 0xff6666ff,\n", "249: 0xff6666ff,\n", "250: 0xff6666ff,\n", "251: 0xffd300ff,\n", "252: 0x267000ff,\n", "253: 0xa57000ff,\n", "254: 0x267000ff}"], "outputs": [], "execution_count": null, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["values_to_crops = {0: 'Background',\n", "                   1: 'Corn',\n", "                   2: 'Cotton',\n", "                   3: 'Rice',\n", "                   4: 'Sorghum',\n", "                   5: 'Soybeans',\n", "                   6: 'Sunflower',\n", "                   10: 'Peanuts',\n", "                   11: 'Tobacco',\n", "                   12: 'Sweet Corn',\n", "                   13: 'Pop or Orn Corn',\n", "                   14: 'Mint',\n", "                   21: 'Barley',\n", "                   22: 'Durum Wheat',\n", "                   23: 'Spring Wheat',\n", "                   24: 'Winter Wheat',\n", "                   25: 'Other Small Grains',\n", "                   26: 'Dbl Crop WinWht/Soybeans',\n", "                   27: 'Rye',\n", "                   28: 'Oats',\n", "                   29: 'Millet',\n", "                   30: 'Speltz',\n", "                   31: 'Canola',\n", "                   32: 'Flaxseed',\n", "                   33: 'Safflower',\n", "                   34: 'Rape Seed',\n", "                   35: 'Mustard',\n", "                   36: 'Alfalfa',\n", "                   37: 'Other Hay/Non Alfalfa',\n", "                   38: 'Camelina',\n", "                   39: 'Buckwheat',\n", "                   41: 'Sugarbeets',\n", "                   42: 'Dry Beans',\n", "                   43: 'Potatoes',\n", "                   44: 'Other Crops',\n", "                   45: 'Sugarcane',\n", "                   46: 'Sweet Potatoes',\n", "                   47: 'Misc Vegs & Fruits',\n", "                   48: 'Watermelons',\n", "                   49: 'Onions',\n", "                   50: 'Cucumbers',\n", "                   51: 'Chick Peas',\n", "                   52: 'Lentils',\n", "                   53: 'Peas',\n", "                   54: 'Tomatoes',\n", "                   55: 'Caneberries',\n", "                   56: 'Hops',\n", "                   57: 'Herbs',\n", "                   58: 'Clover/Wildflowers',\n", "                   59: 'Sod/Grass Seed',\n", "                   60: 'Switchgrass',\n", "                   61: 'Fallow/Idle Cropland',\n", "                   63: 'Forest',\n", "                   64: 'Shrubland',\n", "                   65: 'Barren',\n", "                   66: 'Cherries',\n", "                   67: 'Peaches',\n", "                   68: 'Apples',\n", "                   69: 'Grapes',\n", "                   70: 'Christmas Trees',\n", "                   71: 'Other Tree Crops',\n", "                   72: 'Citrus',\n", "                   74: 'Pecans',\n", "                   75: 'Almonds',\n", "                   76: 'Walnuts',\n", "                   77: 'Pears',\n", "                   81: 'Clouds/No Data',\n", "                   82: 'Developed',\n", "                   83: 'Water',\n", "                   87: 'Wetlands',\n", "                   88: 'Nonag/Undefined',\n", "                   92: 'Aquaculture',\n", "                   111: 'Open Water',\n", "                   112: 'Perennial Ice/Snow ',\n", "                   121: 'Developed/Open Space',\n", "                   122: 'Developed/Low Intensity',\n", "                   123: 'Developed/Med Intensity',\n", "                   124: 'Developed/High Intensity',\n", "                   131: 'Barren',\n", "                   141: 'Deciduous Forest',\n", "                   142: 'Evergreen Forest',\n", "                   143: 'Mixed Forest',\n", "                   152: 'Shrubland',\n", "                   176: 'Grassland/Pasture',\n", "                   190: 'Woody Wetlands',\n", "                   195: 'Herbaceous Wetlands',\n", "                   204: 'Pistachios',\n", "                   205: 'Triticale',\n", "                   206: 'Carrots',\n", "                   207: 'Asparagus',\n", "                   208: 'Garlic',\n", "                   209: 'Cantaloupes',\n", "                   210: 'Prunes',\n", "                   211: 'Olives',\n", "                   212: 'Oranges',\n", "                   213: 'Honeydew Melons',\n", "                   214: 'Broccoli',\n", "                   216: 'Peppers',\n", "                   217: 'Pomegranates',\n", "                   218: 'Nectarines',\n", "                   219: 'Greens',\n", "                   220: 'Plums',\n", "                   221: 'Strawberries',\n", "                   222: 'Squash',\n", "                   223: 'Apricots',\n", "                   224: 'Vetch',\n", "                   225: 'Dbl Crop WinWht/Corn',\n", "                   226: 'Dbl Crop Oats/Corn',\n", "                   227: 'Lettuce',\n", "                   229: 'Pumpkins',\n", "                   230: 'Dbl Crop Lettuce/Durum Wht',\n", "                   231: 'Dbl Crop Lettuce/Cantaloupe',\n", "                   232: 'Dbl Crop Lettuce/Cotton',\n", "                   233: 'Dbl Crop Lettuce/Barley',\n", "                   234: 'Dbl Crop Durum Wht/Sorghum',\n", "                   235: 'Dbl Crop Barley/Sorghum',\n", "                   236: 'Dbl Crop WinWht/Sorghum',\n", "                   237: 'Dbl Crop Barley/Corn',\n", "                   238: 'Dbl Crop WinWht/Cotton',\n", "                   239: 'Dbl Crop Soybeans/Cotton',\n", "                   240: 'Dbl Crop Soybeans/Oats',\n", "                   241: 'Dbl Crop Corn/Soybeans',\n", "                   242: 'Blueberries',\n", "                   243: 'Cabbage',\n", "                   244: 'Cauliflower',\n", "                   245: 'Celery',\n", "                   246: 'Radishes',\n", "                   247: 'Turnips',\n", "                   248: 'Eggplants',\n", "                   249: 'Gourds',\n", "                   250: 'Cranberries',\n", "                   254: 'Dbl Crop Barley/Soybeans'}\n", "\n", "crops_to_values = {v: k for k, v in values_to_crops.items()}\n", "\n", "crops = ['Corn',\n", "         'Cotton',\n", "         'Rice',\n", "         'Sorghum',\n", "         'Soybeans',\n", "         'Sunflower',\n", "         'Peanuts',\n", "         'Tobacco',\n", "         'Sweet Corn',\n", "         'Pop or Orn Corn',\n", "         'Mint','Barley',\n", "         'Durum Wheat',\n", "         'Spring Wheat',\n", "         'Winter Wheat',\n", "         'Other Small Grains',\n", "         'Rye',\n", "         'Oats',\n", "         'Millet',\n", "         'Speltz',\n", "         'Canola',\n", "         'Flaxseed',\n", "         'Safflower',\n", "         'Rape Seed',\n", "         'Mustard',\n", "         'Alfalfa',\n", "         'Other Hay/Non Alfalfa',\n", "         'Camelina',\n", "         'Buckwheat',\n", "         'Sugarbeets',\n", "         'Dry Beans',\n", "         'Potatoes',\n", "         'Other Crops',\n", "         'Sugarcane',\n", "         'Sweet Potatoes',\n", "         'Misc Vegs & Fruits',\n", "         'Watermelons',\n", "         'Onions',\n", "         'Cucumbers',\n", "         'Chick Peas',\n", "         'Lentils',\n", "         'Peas',\n", "         'Tomatoes',\n", "         'Caneberries',\n", "         'Hops',\n", "         'Herbs',\n", "         'Clover/Wildflowers',\n", "         'Cherries',\n", "         'Peaches',\n", "         'Apples',\n", "         'Grapes',\n", "         'Pecans',\n", "         'Almonds',\n", "         'Walnuts',\n", "         'Pears',\n", "         'Pistachios',\n", "         'Triticale',\n", "         'Carrots',\n", "         'Asparagus',\n", "         'Garlic',\n", "         'Cantaloupes',\n", "         'Prunes',\n", "         'Olives',\n", "         'Oranges',\n", "         'Honeydew Melons',\n", "         'Broccoli',\n", "         'Peppers',\n", "         'Pomegranates',\n", "         'Nectarines',\n", "         'Greens',\n", "         'Plums',\n", "         'Strawberries',\n", "         'Squash',\n", "         'Apricots',\n", "         'Vetch',\n", "         'Lettuce',\n", "         'Pumpkins',\n", "         'Blueberries',\n", "         'Cabbage',\n", "         'Cauliflower',\n", "         'Celery',\n", "         'Radishes',\n", "         'Turnips',\n", "         'Eggplants',\n", "         'Gourds',\n", "         'Cranberries']"], "outputs": [], "execution_count": null, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": ["value_dict"], "outputs": [], "execution_count": null, "cell_type": "code"}, {"metadata": {"collapsed": true}, "source": [], "outputs": [], "execution_count": null, "cell_type": "code"}], "nbformat": 4}